// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minglog.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace MD.Logger
{
    /// <summary>
    /// 日志服务
    /// </summary>
    public static partial class LogService
    {
        static readonly string __ServiceName = "MD.Logger.LogService";

        static readonly grpc::Marshaller<global::MD.Logger.MingLog> __Marshaller_MingLog = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MD.Logger.MingLog.Parser.ParseFrom);
        static readonly grpc::Marshaller<global::MD.Logger.ExecuteResult> __Marshaller_ExecuteResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MD.Logger.ExecuteResult.Parser.ParseFrom);

        static readonly grpc::Method<global::MD.Logger.MingLog, global::MD.Logger.ExecuteResult> __Method_WriteLog = new grpc::Method<global::MD.Logger.MingLog, global::MD.Logger.ExecuteResult>(
            grpc::MethodType.Unary,
            __ServiceName,
            "WriteLog",
            __Marshaller_MingLog,
            __Marshaller_ExecuteResult);

        /// <summary>Service descriptor</summary>
        public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
        {
            get { return global::MD.Logger.MinglogReflection.Descriptor.Services[0]; }
        }

        /// <summary>Base class for server-side implementations of LogService</summary>
        public abstract partial class LogServiceBase
        {
            /// <summary>
            /// 记录日志
            /// </summary>
            /// <param name="request">The request received from the client.</param>
            /// <param name="context">The context of the server-side call handler being invoked.</param>
            /// <returns>The response to send back to the client (wrapped by a task).</returns>
            public virtual global::System.Threading.Tasks.Task<global::MD.Logger.ExecuteResult> WriteLog(global::MD.Logger.MingLog request, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

        }

        /// <summary>Client for LogService</summary>
        public partial class LogServiceClient : grpc::ClientBase<LogServiceClient>
        {
            /// <summary>Creates a new client for LogService</summary>
            /// <param name="channel">The channel to use to make remote calls.</param>
            public LogServiceClient(grpc::Channel channel) : base(channel)
            {
            }
            /// <summary>Creates a new client for LogService that uses a custom <c>CallInvoker</c>.</summary>
            /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
            public LogServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
            {
            }
            /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
            protected LogServiceClient() : base()
            {
            }
            /// <summary>Protected constructor to allow creation of configured clients.</summary>
            /// <param name="configuration">The client configuration.</param>
            protected LogServiceClient(ClientBaseConfiguration configuration) : base(configuration)
            {
            }

            /// <summary>
            /// 记录日志
            /// </summary>
            /// <param name="request">The request to send to the server.</param>
            /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            /// <param name="cancellationToken">An optional token for canceling the call.</param>
            /// <returns>The response received from the server.</returns>
            public virtual global::MD.Logger.ExecuteResult WriteLog(global::MD.Logger.MingLog request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
            {
                return WriteLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            /// <summary>
            /// 记录日志
            /// </summary>
            /// <param name="request">The request to send to the server.</param>
            /// <param name="options">The options for the call.</param>
            /// <returns>The response received from the server.</returns>
            public virtual global::MD.Logger.ExecuteResult WriteLog(global::MD.Logger.MingLog request, grpc::CallOptions options)
            {
                return CallInvoker.BlockingUnaryCall(__Method_WriteLog, null, options, request);
            }
            /// <summary>
            /// 记录日志
            /// </summary>
            /// <param name="request">The request to send to the server.</param>
            /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            /// <param name="cancellationToken">An optional token for canceling the call.</param>
            /// <returns>The call object.</returns>
            public virtual grpc::AsyncUnaryCall<global::MD.Logger.ExecuteResult> WriteLogAsync(global::MD.Logger.MingLog request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
            {
                return WriteLogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            /// <summary>
            /// 记录日志
            /// </summary>
            /// <param name="request">The request to send to the server.</param>
            /// <param name="options">The options for the call.</param>
            /// <returns>The call object.</returns>
            public virtual grpc::AsyncUnaryCall<global::MD.Logger.ExecuteResult> WriteLogAsync(global::MD.Logger.MingLog request, grpc::CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(__Method_WriteLog, null, options, request);
            }
            /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
            protected override LogServiceClient NewInstance(ClientBaseConfiguration configuration)
            {
                return new LogServiceClient(configuration);
            }
        }

        /// <summary>Creates service definition that can be registered with a server</summary>
        /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        public static grpc::ServerServiceDefinition BindService(LogServiceBase serviceImpl)
        {
            return grpc::ServerServiceDefinition.CreateBuilder()
                .AddMethod(__Method_WriteLog, serviceImpl.WriteLog).Build();
        }

    }
}
#endregion
